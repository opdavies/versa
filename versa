#!/usr/bin/env php

<?php
require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;

$application = new SingleCommandApplication();

$application->addArgument(
    name: 'command',
    mode: InputArgument::REQUIRED,
    description: 'The command to run',
);

$application->addOption(
    name: 'type',
    shortcut: 't',
    mode: InputArgument::OPTIONAL,
    description: 'The project type',
    suggestedValues: ['drupal', 'sculpin'],
);

$application->addOption(
    name: 'working-dir',
    shortcut: 'd',
    mode: InputArgument::OPTIONAL,
    description: 'The project\'s working directory',
    default: '.',
);

$application->setCode(function (InputInterface $input): int {
    $filesystem = new Filesystem();

    $workingDir = $input->getOption('working-dir');

    // TODO: only allow defined commands - build, install, test, run.
    switch ($input->getArgument('command')) {
        case 'install':
            // TODO: Composer in Docker Compose?
            $process = new Process(command: ['composer', 'install']);
            $process->setTty(true);
            $process->setWorkingDirectory($workingDir);
            $process->run();
            break;

        case 'run':
            if ($filesystem->exists($workingDir.'/docker-compose.yaml')) {
                $process = new Process(command: ['docker', 'compose', 'up']);
                $process->setTimeout(null);
                $process->setTty(true);
                $process->setWorkingDirectory($workingDir);
                $process->run();
            } else {
                switch ($input->getOption('type')) {
                    case 'sculpin':
                        // TODO: how to pass arbitrary arguments, such as `--port 8001`?
                        $process = new Process(command: ['./vendor/bin/sculpin', 'generate', '--server', '--watch']);
                        $process->setTimeout(null);
                        $process->setTty(true);
                        $process->setWorkingDirectory($workingDir);
                        $process->run();
                        break;
                }
            }
            break;

        case 'test':
            // TODO: PHPUnit, Pest or ParaTest.
            // TODO: commands in Docker Compose?
            $process = new Process(command: ['./vendor/bin/phpunit']);
            $process->setTty(true);
            $process->setWorkingDirectory($workingDir);
            $process->run();
            break;
    }

    return 0;
});

$application->run();
